head(sample_means)
mean_theoretical <- 1/lambda
mean_theoretical
mean_of_sample_means <- mean(sample_means$m)
mean_of_sample_means
sd_of_sample_means <- sd(sample_means$m)
sd_theoretical <- (1/lambda)/sqrt(num_samples)
var_of_sample_means <- var(sample_means$m)
var_theoretical <- ((1/lambda)/sqrt(num_samples))^2
plot1 <- ggplot(sample_means,aes(x=m)) +
geom_histogram(binwidth=lambda/2,fill="lightblue",color="black",aes(y = ..density..)) +
labs(title="40 Sample Exponential Distribution Means", x="Mean of 40 Samples, 1000 Simulations", y="Density") +
geom_vline(xintercept=mean_of_sample_means,size=1.5, color="blue",linetype = "longdash") +
geom_vline(xintercept=mean_theoretical,size=1.5,color="yellow") +
stat_function(fun=dnorm,args=list(mean=mean_of_sample_means,sd=sd_of_sample_means),color="green",size=1.5) +
stat_function(fun=dnorm,args=list(mean=mean_theoretical,sd=sd_theoretical),color="red",size=1.5)
print(plot1)
lambda <- 0.2
num_samples <- 4000
num_sims <- 1:100000
sample_means <- data.frame(m = sapply(num_sims, function(m) {
mean(rexp(num_samples, lambda))
}))
head(sample_means)
mean_theoretical <- 1/lambda
mean_theoretical
mean_of_sample_means <- mean(sample_means$m)
mean_of_sample_means
sd_of_sample_means <- sd(sample_means$m)
sd_theoretical <- (1/lambda)/sqrt(num_samples)
var_of_sample_means <- var(sample_means$m)
var_theoretical <- ((1/lambda)/sqrt(num_samples))^2
plot1 <- ggplot(sample_means,aes(x=m)) +
geom_histogram(binwidth=lambda/2,fill="lightblue",color="black",aes(y = ..density..)) +
labs(title="40 Sample Exponential Distribution Means", x="Mean of 40 Samples, 1000 Simulations", y="Density") +
geom_vline(xintercept=mean_of_sample_means,size=1.5, color="blue",linetype = "longdash") +
geom_vline(xintercept=mean_theoretical,size=1.5,color="yellow") +
stat_function(fun=dnorm,args=list(mean=mean_of_sample_means,sd=sd_of_sample_means),color="green",size=1.5) +
stat_function(fun=dnorm,args=list(mean=mean_theoretical,sd=sd_theoretical),color="red",size=1.5)
print(plot1)
library(datasets)
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
library(ggplot2)
boxplot(len ~ supp * dose,ToothGrowth, col="blue", ylab="Length", xlab="Supplement type & Dose",main="Boxplots by supplement type and dow")
boxplot(len ~ supp * dose,ToothGrowth, col="red", ylab="Tooth Length", xlab="Supplement type (OJ=Orange Juice, VC=Ascorbic Acid) & Dose in milligrams",main="Toothgrowth by Supplement and Dose")
boxplot(len ~ supp * dose,ToothGrowth,col=(c("red","green")),main="Toothgrowth by Supplement and Dose",xlab="Supplement type (OJ=Orange Juice, VC=Ascorbic Acid) & Dose in milligrams",ylab="Tooth Length")
help(ToothGrowth)
coplot()
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosages", bar.bg = 2, ylab="Tooth
Length")
library(ggplot2)
library(datasets)
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
boxplot(len ~ supp * dose,ToothGrowth,col=(c("red","green")),main="Toothgrowth by Supplement and Dose",xlab="Supplement type (OJ=Orange Juice, VC=Ascorbic Acid) & Dose in milligrams",ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosages", bar.bg = 2, ylab="Tooth
Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = 3, ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = 4, ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = 1, ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(num = gray(0.8), fac = gray(0.95)), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(num = orange(0.8), fac = gray(0.95)), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(num = blue(0.8), fac = gray(0.95)), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(num = "orange"", fac = gray(0.95)), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(num = "orange", fac = gray(0.95)), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(num = "orange", fac = "Orange", ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(num = "red", fac = "pink", ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(num = "red", fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(num = "red"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(5) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(3) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(2) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(1) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(6) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(7) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(8) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(9) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(19) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = "green" , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = "blue" , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, col = c(4) , pch = "+", panel
= panel.smooth, xlab = "Supplement Dosage in Milligrams", bar.bg = c(num = "red", fac = "pink"), ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, pch = "+", panel = panel.smooth, xlab = "Supplement Dosage in Milligrams", ylab="Tooth Length", col = "blue", bar.bg = c(num = "red", fac = "pink"))
t.test(len ~supp,ToothGrowth[ToothGrowth$dose==0.5,],paired=FALSE, var.equal=TRUE)
library(ggplot2)
library(datasets)
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
boxplot(len ~ supp * dose, ToothGrowth, col=(c("red","green")), main="Toothgrowth by Supplement and Dose", xlab="Supplement type (OJ=Orange Juice, VC=Ascorbic Acid) & Dose in milligrams", ylab="Tooth Length")
coplot(len ~ dose | supp, data = ToothGrowth, pch = "+", panel = panel.smooth, xlab = "Supplement Dosage in Milligrams", ylab="Tooth Length", col = "blue", bar.bg = c(fac = "pink"))
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose==0.5,], paired=FALSE, var.equal=TRUE)
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose==1,], paired=FALSE, var.equal=TRUE)
t.test(len ~ dose, ToothGrowth[ToothGrowth$dose!=2,], paired=FALSE, var.equal=TRUE)
lambda <- 0.2
num_samples <- 40
num_sims <- 1:1000
sample_means <- data.frame(m = sapply(num_sims, function(m) {
mean(rexp(num_samples, lambda))
}))
head(sample_means)
mean_theoretical <- 1/lambda
mean_theoretical
mean_of_sample_means <- mean(sample_means$m)
mean_of_sample_means
sd_of_sample_means <- sd(sample_means$m)
sd_theoretical <- (1/lambda)/sqrt(num_samples)
var_of_sample_means <- var(sample_means$m)
var_theoretical <- ((1/lambda)/sqrt(num_samples))^2
library(ggplot2)
library(gridExtra)
library(grid)
plot1 <- ggplot(sample_means,aes(x=m)) +
geom_histogram(binwidth=lambda/2,fill="lightblue",color="black",aes(y = ..density..)) +
labs(title="40 Sample Exponential Distribution Means", x="Mean of 40 Samples, 1000 Simulations", y="Density") +
geom_vline(xintercept=mean_of_sample_means,size=1.5, color="blue",linetype = "longdash") +
geom_vline(xintercept=mean_theoretical,size=1.5,color="yellow") +
stat_function(fun=dnorm,args=list(mean=mean_of_sample_means,sd=sd_of_sample_means),color="green",size=1.5) +
stat_function(fun=dnorm,args=list(mean=mean_theoretical,sd=sd_theoretical),color="red",size=1.5)
print(plot1)
library(grid)
library(gridExtra)
library(ggplot2)
plot1 <- ggplot(sample_means,aes(x=m)) +
geom_histogram(binwidth=lambda/2,fill="lightblue",color="black",aes(y = ..density..)) +
labs(title="40 Sample Exponential Distribution Means", x="Mean of 40 Samples, 1000 Simulations", y="Density") +
geom_vline(xintercept=mean_of_sample_means,size=1.5, color="blue",linetype = "longdash") +
geom_vline(xintercept=mean_theoretical,size=1.5,color="yellow") +
stat_function(fun=dnorm,args=list(mean=mean_of_sample_means,sd=sd_of_sample_means),color="green",size=1.5) +
stat_function(fun=dnorm,args=list(mean=mean_theoretical,sd=sd_theoretical),color="red",size=1.5)
print(plot1)
grid.arrange(tmp,tmp,tmp,tmp,ncol=2)
tmp=plot1 <- ggplot(sample_means,aes(x=m)) +
geom_histogram(binwidth=lambda/2,fill="lightblue",color="black",aes(y = ..density..)) +
labs(title="40 Sample Exponential Distribution Means", x="Mean of 40 Samples, 1000 Simulations", y="Density") +
geom_vline(xintercept=mean_of_sample_means,size=1.5, color="blue",linetype = "longdash") +
geom_vline(xintercept=mean_theoretical,size=1.5,color="yellow") +
stat_function(fun=dnorm,args=list(mean=mean_of_sample_means,sd=sd_of_sample_means),color="green",size=1.5) +
stat_function(fun=dnorm,args=list(mean=mean_theoretical,sd=sd_theoretical),color="red",size=1.5)
lambda <- 0.2
num_samples <- 40
num_sims <- 1:1000
sample_means <- data.frame(m = sapply(num_sims, function(m) {
mean(rexp(num_samples, lambda))
}))
mean_theoretical <- 1/lambda
mean_of_sample_means <- mean(sample_means$m)
sd_of_sample_means <- sd(sample_means$m)
sd_theoretical <- (1/lambda)/sqrt(num_samples)
var_of_sample_means <- var(sample_means$m)
var_theoretical <- ((1/lambda)/sqrt(num_samples))^2
plot1 <- ggplot(sample_means,aes(x=m)) +
geom_histogram(binwidth=lambda/2,fill="lightblue",color="black",aes(y = ..density..)) +
labs(title="40 Sample Exponential Distribution Means", x="Mean of 40 Samples, 1000 Simulations", y="Density") +
geom_vline(xintercept=mean_of_sample_means,size=1.5, color="blue",linetype = "longdash") +
geom_vline(xintercept=mean_theoretical,size=1.5,color="yellow") +
stat_function(fun=dnorm,args=list(mean=mean_of_sample_means,sd=sd_of_sample_means),color="green",size=1.5) +
stat_function(fun=dnorm,args=list(mean=mean_theoretical,sd=sd_theoretical),color="red",size=1.5)
lambda <- 0.2
num_samples <- 4000
num_sims <- 1:1000
sample_means <- data.frame(m = sapply(num_sims, function(m) {
mean(rexp(num_samples, lambda))
}))
mean_theoretical <- 1/lambda
mean_of_sample_means <- mean(sample_means$m)
sd_of_sample_means <- sd(sample_means$m)
sd_theoretical <- (1/lambda)/sqrt(num_samples)
var_of_sample_means <- var(sample_means$m)
var_theoretical <- ((1/lambda)/sqrt(num_samples))^2
plot2 <- ggplot(sample_means,aes(x=m)) +
geom_histogram(binwidth=lambda/2,fill="lightblue",color="black",aes(y = ..density..)) +
labs(title="4000 Sample Exponential Distribution Means", x="Mean of 4000 Samples, 1000 Simulations", y="Density") +
geom_vline(xintercept=mean_of_sample_means,size=1.5, color="blue",linetype = "longdash") +
geom_vline(xintercept=mean_theoretical,size=1.5,color="yellow") +
stat_function(fun=dnorm,args=list(mean=mean_of_sample_means,sd=sd_of_sample_means),color="green",size=1.5) +
stat_function(fun=dnorm,args=list(mean=mean_theoretical,sd=sd_theoretical),color="red",size=1.5)
lambda <- 0.2
num_samples <- 40
num_sims <- 1:100000
sample_means <- data.frame(m = sapply(num_sims, function(m) {
mean(rexp(num_samples, lambda))
}))
mean_theoretical <- 1/lambda
mean_of_sample_means <- mean(sample_means$m)
sd_of_sample_means <- sd(sample_means$m)
sd_theoretical <- (1/lambda)/sqrt(num_samples)
var_of_sample_means <- var(sample_means$m)
var_theoretical <- ((1/lambda)/sqrt(num_samples))^2
plot3 <- ggplot(sample_means,aes(x=m)) +
geom_histogram(binwidth=lambda/2,fill="lightblue",color="black",aes(y = ..density..)) +
labs(title="40 Sample Exponential Distribution Means", x="Mean of 40 Samples, 100000 Simulations", y="Density") +
geom_vline(xintercept=mean_of_sample_means,size=1.5, color="blue",linetype = "longdash") +
geom_vline(xintercept=mean_theoretical,size=1.5,color="yellow") +
stat_function(fun=dnorm,args=list(mean=mean_of_sample_means,sd=sd_of_sample_means),color="green",size=1.5) +
stat_function(fun=dnorm,args=list(mean=mean_theoretical,sd=sd_theoretical),color="red",size=1.5)
lambda <- 0.2
num_samples <- 4000
num_sims <- 1:100000
sample_means <- data.frame(m = sapply(num_sims, function(m) {
mean(rexp(num_samples, lambda))
}))
mean_theoretical <- 1/lambda
mean_of_sample_means <- mean(sample_means$m)
sd_of_sample_means <- sd(sample_means$m)
sd_theoretical <- (1/lambda)/sqrt(num_samples)
var_of_sample_means <- var(sample_means$m)
var_theoretical <- ((1/lambda)/sqrt(num_samples))^2
plot4 <- ggplot(sample_means,aes(x=m)) +
geom_histogram(binwidth=lambda/2,fill="lightblue",color="black",aes(y = ..density..)) +
labs(title="4000 Sample Exponential Distribution Means", x="Mean of 4000 Samples, 100000 Simulations", y="Density") +
geom_vline(xintercept=mean_of_sample_means,size=1.5, color="blue",linetype = "longdash") +
geom_vline(xintercept=mean_theoretical,size=1.5,color="yellow") +
stat_function(fun=dnorm,args=list(mean=mean_of_sample_means,sd=sd_of_sample_means),color="green",size=1.5) +
stat_function(fun=dnorm,args=list(mean=mean_theoretical,sd=sd_theoretical),color="red",size=1.5)
grid.arrange(plot1,plot2,plot3,plot4,ncol=2)
library(ggplot2)
library(grid)
library(gridExtra)
lambda <- 0.2
num_samples <- 40
num_sims <- 1:1000
sample_means <- data.frame(m = sapply(num_sims, function(m) {
mean(rexp(num_samples, lambda))
}))
mean_theoretical <- 1/lambda
mean_of_sample_means <- mean(sample_means$m)
sd_of_sample_means <- sd(sample_means$m)
sd_theoretical <- (1/lambda)/sqrt(num_samples)
var_of_sample_means <- var(sample_means$m)
var_theoretical <- ((1/lambda)/sqrt(num_samples))^2
plot1 <- ggplot(sample_means,aes(x=m)) +
geom_histogram(binwidth=lambda/2,fill="lightblue",color="black",aes(y = ..density..)) +
labs(title="40 Sample Exp Dist Means", x="Mean of 40 Samples, 1000 Simulations", y="Density") +
geom_vline(xintercept=mean_of_sample_means,size=1.5, color="blue",linetype = "longdash") +
geom_vline(xintercept=mean_theoretical,size=1.5,color="yellow") +
stat_function(fun=dnorm,args=list(mean=mean_of_sample_means,sd=sd_of_sample_means),color="green",size=1.5) +
stat_function(fun=dnorm,args=list(mean=mean_theoretical,sd=sd_theoretical),color="red",size=1.5)
print(plot1)
lambda <- 0.2
num_samples <- 4000
num_sims <- 1:1000
sample_means <- data.frame(m = sapply(num_sims, function(m) {
mean(rexp(num_samples, lambda))
}))
mean_theoretical <- 1/lambda
mean_of_sample_means <- mean(sample_means$m)
sd_of_sample_means <- sd(sample_means$m)
sd_theoretical <- (1/lambda)/sqrt(num_samples)
var_of_sample_means <- var(sample_means$m)
var_theoretical <- ((1/lambda)/sqrt(num_samples))^2
plot2 <- ggplot(sample_means,aes(x=m)) +
geom_histogram(binwidth=lambda/2,fill="lightblue",color="black",aes(y = ..density..)) +
labs(title="4000 Sample Exp Dist Means", x="Mean of 4000 Samples, 1000 Simulations", y="Density") +
geom_vline(xintercept=mean_of_sample_means,size=1.5, color="blue",linetype = "longdash") +
geom_vline(xintercept=mean_theoretical,size=1.5,color="yellow") +
stat_function(fun=dnorm,args=list(mean=mean_of_sample_means,sd=sd_of_sample_means),color="green",size=1.5) +
stat_function(fun=dnorm,args=list(mean=mean_theoretical,sd=sd_theoretical),color="red",size=1.5)
print(plot2)
library(swirl)
rm(list=ls())
swirl()
1
swirl()
swirl()
2
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
pt(q=2.5,df=15,lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail=FALSE)
mybin
pbinom(6,size=8,prob=.5,lower.tail=FALSE)
pbinom(7,size=8,prob=.5,lower.tail=TRUE)
ppois(9,5, lower.tail=FALSE)
head(pValues)
sum(pValues<0.05)
sum(p.adjust(pValues,method="bonferroni"))
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
table(pValues2<.05,trueStatus)
.024
.012
24/500
table(p.adjust(pValues2<.05,method="bonferroni"),trueStatus)
table(p.adjust(pValues2,method="bonferroni") < 0.05,trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05,trueStatus)
R.version.string
install_from_swirl("Regression Models")
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(hitter(child,4) ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent,galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope,ols.ic)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,(varRes+varEst))
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(parent ~ child)
l_nor <- lm(gpa_nor ~gch_nor)
l_nor <- lm(gpa_nor ~ gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent,galton)
sqrt(sum(fit$residuals)/926)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- galton$child-mu
sTot <- sum((galton$child-mu)^2)
sRes <- sum((galton$child-sTot)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(child ~ parent,galton)
cor(galton$child,galton$parent)
cor(galton$parent,galton$child)^2
help(mtcars)
swirl()
library("swirl")
rm(list=ls())
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent
| -1, galton)
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
view(trees)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
library("swirl")
rm(list=ls())
swirl()
library(datasets)
data(mtcars)
#mtcars$cyl  <- factor(mtcars$cyl)
#mtcars$vs   <- factor(mtcars$vs)
#mtcars$gear <- factor(mtcars$gear)
#mtcars$carb <- factor(mtcars$carb)
mtcars$am   <- factor(mtcars$am,labels=c("Automatic","Manual"))
boxplot(mpg ~ am, data = mtcars,
main = "MPG by Transmission Type",
ylab = "Miles Per Gallon",
xlab = "Transmission Type",
col = (c("light blue","dark blue")))
boxplot(mpg ~ am, data = mtcars,
main = "MPG by Transmission Type",
ylab = "Miles Per Gallon",
xlab = "Transmission Type",
col = (c("light blue","blue")))
pairs(mpg ~ ., data = mtcars)
analysis <- aov(mpg ~ ., data = mtcars)
summary(analysis)
package("caret")
library.package("caret")
install.packages("caret", dependencies = c("Depends", "Suggests"))
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library.packages("AppliedPredictiveModeling")
packages.library("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
library(caret)
install.packages("caret")
library(caret)
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
library(rpart)
library(rpart.plot)
setwd("~/Coursera/8-Practical Machine Learning/Course Project/")
if (!file.exists("./data/pml-training.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/pml-training.csv")
}
if (!file.exists("./data/pml-testing.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"./data/pml-testing.csv")
}
data_training_raw = read.csv("./data/pml-training.csv", na.strings = c("NA", ""))
data_testing_raw  = read.csv("./data/pml-testing.csv", na.strings = c("NA", ""))
library(caret)
library(rpart)
library(rpart.plot)
test_for_na <- sapply(data_training_raw, function(x) {sum(is.na(x))})
table(test_for_na)
cols_nodata <- names(test_for_na[test_for_na==19216])
data_training_goodcols <- data_training_raw[, !names(data_training_raw) %in% cols_nodata]
data_testing_goodcols <- data_testing_raw[, !names(data_testing_raw) %in% cols_nodata]
data_training_goodcols <- data_training_goodcols[,-c(1:7)]
data_testing_goodcols <- data_testing_goodcols[,-c(1:7)]
str(data_training_goodcols)
set.seed(1248)
inTrain = createDataPartition(data_training_goodcols$classe, p = 0.6, list=FALSE)
data_training = data_training_goodcols[inTrain,]
data_crossvalidate = data_training_goodcols[-inTrain,]
model1 <- rpart(classe ~ ., data=data_training_goodcols, method="class")
model_1 <- rpart(classe ~ ., data=data_training_goodcols, method="class")
prediction_1 <- predict(model_1, data_testing_goodcols, type = "class")
rpart.plot(model_1, main="Decision Tree", extra=102, under=TRUE, faclen=0)
confusionMatrix(prediction_1, data_testing$classe)
prediction_1
model_1 <- rpart(classe ~ ., data=data_training, method="class")
prediction_1 <- predict(model_1, data_crossvalidate, type = "class")
rpart.plot(model_1, main="Decision Tree", extra=102, under=TRUE, faclen=0)
confusionMatrix(prediction_1, data_crossvalidate$classe)
library(randomForest)
model_2 <- randomForest(classe ~. , data=data_training, method="class")
prediction_2 <- predict(model_2, data_crossvalidate, type = "class")
confusionMatrix(prediction_2, data_crossvalidate$classe)
testingPred <- predict(model_2, data_testing_goodcols)
testingPred
rpart.plot(model_1, main="Decision Tree", extra=102, under=TRUE, faclen=0)
rpart.plot(model_1, main="Decision Tree", extra=102, under=TRUE)
rpart.plot(model_1, main="Decision Tree", extra=102)
rpart.plot(model_1, main="Decision Tree")
rpart.plot(model_1, main="Decision Tree")
